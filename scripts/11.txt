
** 11-03, P-506

let sum = (v1, v2) => {
      return v1+v2;
}
export default sum;




import sum from './sum';
jest.autoMockOff();
describe('sum', function() {
    it('adds 1+2 equal 3', function() {
        expect(sum(1,2)).toBe(3);
    });
})



** 11-07, P-511

//프로젝트 생성
create-react-app unittest2
cd unittest2
yarn add -D react-test-renderer



** 11-08, P-512

import React from 'react';

const STATUS = {
  HOVERED: 'hovered',
  NORMAL: 'normal',
};

class Link extends React.Component {

  constructor() {
    super();

    this._onMouseEnter = this._onMouseEnter.bind(this);
    this._onMouseLeave = this._onMouseLeave.bind(this);

    this.state = {
      class: STATUS.NORMAL,
    };
  }

 _onMouseEnter() {
    this.setState({class: STATUS.HOVERED});
  }

  _onMouseLeave() {
    this.setState({class: STATUS.NORMAL});
  }

  render() {
    return (
      <a
        className={this.state.class}
        href={this.props.page || '#'}
        onMouseEnter={this._onMouseEnter}
        onMouseLeave={this._onMouseLeave}>
        {this.props.children}
      </a>
    );
  }
}

export default Link;



** 11-09, P-513

import React from 'react';

class Clock extends React.Component {

  constructor() {
    super();
    this.state = {seconds: Date.now() / 1000};
  }

  componentDidMount() {
    this.timerID = setInterval(
      () => this.tick(),
      1000
    );
  }

  componentWillUnmount() {
    clearInterval(this.timerID);
  }

  tick() {
    this.setState({
      seconds: Date.now() / 1000,
    });
  }

  render() {
    return (
      <p>{this.state.seconds} seconds 
            have ellapsed since the UNIX epoch.</p>
    );
  }
}

export default Clock;




** 11-10, P-514

import React from 'react';
import Clock from '../Clock';
import renderer from 'react-test-renderer';

jest.useFakeTimers();
Date.now = jest.fn(() => 1482363367071);

it('renders correctly', () => {
  const tree = renderer.create(
    <Clock />
  ).toJSON();
  expect(tree).toMatchSnapshot();
});




** 11-11, P-515

import React from 'react';
import Link from '../Link';
import renderer from 'react-test-renderer';

it('renders correctly', () => {
  const tree = renderer.create(
    <Link page="http://www.facebook.com">Facebook</Link>
  ).toJSON();
  expect(tree).toMatchSnapshot();
});

it('renders as an anchor when no page is set', () => {
  const tree = renderer.create(
    <Link>Facebook</Link>
  ).toJSON();
  expect(tree).toMatchSnapshot();
});

it('properly escapes quotes', () => {
  const tree = renderer.create(
    <Link>{'"Facebook" \\\'is \\ \'awesome\''}</Link>
  ).toJSON();
  expect(tree).toMatchSnapshot();
});

it('changes the class when hovered', () => {
  const component = renderer.create(
    <Link page="http://www.facebook.com">Facebook</Link>
  );
  let tree = component.toJSON();
  expect(tree).toMatchSnapshot();

  // manually trigger the callback
  tree.props.onMouseEnter();
  // re-rendering
  tree = component.toJSON();
  expect(tree).toMatchSnapshot();

  // manually trigger the callback
  tree.props.onMouseLeave();
  // re-rendering
  tree = component.toJSON();
  expect(tree).toMatchSnapshot();
});


** 11-14, P-519

create-react-app unittest3
cd unittest3
yarn add -D enzyme enzyme-adapter-react-16

//src/setupTests.js 변경
import '@testing-library/jest-dom/extend-expect';
import { configure } from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';

configure({ adapter: new Adapter() });


** 11-15, P-520

import React from 'react';

class Checkbox extends React.Component {

  constructor(props) {
    super(props);
    this.state = {isChecked: false};

    this.onChange = this.onChange.bind(this);
  }

  onChange() {
    this.setState({isChecked: !this.state.isChecked});
  }
  
  render() {
    return (
      <label>
        <input
          type="checkbox"
          checked={this.state.isChecked}
          onChange={this.onChange}
        />
        {this.state.isChecked ? this.props.labelOn : this.props.labelOff}
      </label>
    );
  }
}

export default Checkbox;



** 11-16, P-521

import React from 'react';
import Checkbox from './Checkbox';
import {shallow} from 'enzyme';

test('Checkbox changes the text after click', () => {
    const checkbox = shallow(
       <Checkbox labelOn="On" labelOff="Off" />
    );
    expect(checkbox.text()).toEqual('Off');
     //이벤트 시뮬레이션
    checkbox.find('input').simulate('change');
    expect(checkbox.text()).toEqual('On');

});



















